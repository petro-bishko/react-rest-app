{"version":3,"sources":["components/UI/Nav/Nav.tsx","pages/ProjectScan/ProjectScan.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","className","href","id","title","link","map","val","index","key","to","ProjectScan","useState","setProject","useEffect","axios","get","then","res","data","value","console","log","Fragment","onClick","post","name","folders","files","scope","App","role","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAoCeA,G,MA3BO,WAOpB,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,+CACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,QACA,yBAAKD,UAAU,2BAA2BE,GAAG,0BAC3C,wBAAIF,UAAU,sBAbM,CAC9B,CACEG,MAAO,OACPC,KAAM,MAWaC,KAAI,SAACC,EAAKC,GACjB,OAAQ,wBAAIP,UAAU,kBAAkBQ,IAAKD,GAAO,kBAAC,IAAD,CAASP,UAAU,WAAWS,GAAIH,EAAIF,MAAOE,EAAIH,mB,yBCsCxGO,G,MA3De,WAAO,IAAD,EACJC,mBAAS,IADL,mBAClBC,GADkB,WAiBlC,OAPAC,qBAAU,WACRC,IAAMC,IAAI,qCAAqCC,MAAK,SAACC,GAAD,OAASA,EAAIC,QAC9DF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZP,EAAWO,QAEd,IAED,kBAAC,IAAMG,SAAP,KACE,6BAAStB,UAAU,yBACjB,yBAAKA,UAAU,aACb,wBAAIA,UAAU,qBAAd,oCACA,qEAGA,2BACE,4BAAQuB,QAAS,WAvBzBT,IAAMU,KAAK,oCAAqC,CAC9CC,KAAM,eACNC,QAAS,EACTC,MAAO,IACNX,MAAK,SAACC,GAAD,OAASL,EAAWK,EAAIC,UAmBgBlB,UAAU,gBAAlD,qBAIN,iCACE,yBAAKA,UAAU,aACb,4CACA,2BAAOA,UAAU,kCACf,+BACA,4BACE,wBAAI4B,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,iBACA,wBAAIA,MAAM,OAAV,oBAGF,+BACA,4BACE,wBAAIA,MAAM,OAAV,KACA,iCACA,kCACA,oCACA,4BAAI,uBAAG3B,KAAK,KAAR,sBCjCH4B,EAdO,WACpB,OACE,kBAAC,IAAMP,SAAP,KACE,kBAAC,EAAD,MAEA,0BAAMQ,KAAK,QACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWtB,QCDjBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAiBC,SAASC,eAAe,SDiI3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.00399332.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Nav.css'\r\n\r\nexport interface navInterface {\r\n  title: string,\r\n  link: string;\r\n}\r\n\r\nconst Nav: React.FC = () => {\r\n  const navList: navInterface[] = [\r\n    {\r\n      title: 'Home',\r\n      link: '/'\r\n    }\r\n  ];\r\n  return (\r\n    <div className=\"container-fluid bg-light\">\r\n      <div className=\"row\">\r\n        <div className=\"container\">\r\n          <nav className=\"navbar navbar-expand-lg navbar-light  w-100\">\r\n            <a className=\"navbar-brand\" href=\"/\">Logo</a>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav mr-auto\">\r\n                {navList.map((val, index) => {\r\n                  return (<li className=\"nav-item active\" key={index}><NavLink className=\"nav-link\" to={val.link}>{val.title}</NavLink></li>)\r\n                })}\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Nav;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './ProjectScan.css'\r\n\r\nconst ProjectScan: React.FC = () => {\r\n  const [project, setProject] = useState({});\r\n  const createProject = () => {\r\n    axios.post('http://localhost:1000/v1/projects', {\r\n      name: 'Test project',\r\n      folders: 2,\r\n      files: 3\r\n    }).then((res) => setProject(res.data))\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:1000/v1/projects').then((res) => res.data)\r\n      .then(value => {\r\n        console.log(value); // TODO remove console.log\r\n        setProject(value);\r\n      })\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"jumbotron text-center\">\r\n        <div className=\"container\">\r\n          <h1 className=\"jumbotron-heading\">Project vulnerabilities detector</h1>\r\n          <p>\r\n            Check your project for vulnerabilities\r\n          </p>\r\n          <p>\r\n            <button onClick={() => createProject()} className=\"btn btn-dark\">Upload Project</button>\r\n          </p>\r\n        </div>\r\n      </section>\r\n      <section>\r\n        <div className=\"container\">\r\n          <h3>Project name</h3>\r\n          <table className=\"table table-striped table-dark\">\r\n            <thead>\r\n            <tr>\r\n              <th scope=\"col\">#</th>\r\n              <th scope=\"col\">Folders</th>\r\n              <th scope=\"col\">Files</th>\r\n              <th scope=\"col\">Count of data</th>\r\n              <th scope=\"col\">See sours file</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr>\r\n              <th scope=\"row\">1</th>\r\n              <td>2</td>\r\n              <td>23</td>\r\n              <td>1200</td>\r\n              <td><a href=\"/\">File name</a></td>\r\n            </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default ProjectScan;\r\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Nav from './components/UI/Nav/Nav';\nimport ProjectScan from './pages/ProjectScan/ProjectScan';\n\nconst App: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Nav/>\n\n      <main role=\"main\">\n        <Switch>\n          <Route path=\"/\" component={ProjectScan}/>\n        </Switch>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router><App/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}